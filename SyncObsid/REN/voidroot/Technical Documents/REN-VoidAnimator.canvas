{
	"nodes":[
		{"id":"5aaf23e81bb1d4f4","type":"text","text":"### VoidAnimator Plugin\n---\n\n##### Plugin Description\nAn animation builder for UI components. It allows you to use different presets without any code. You attach a component to it. define the type and it gives you slots for different animation presets it has. (ie. if it's a button it has a hover anim)\n\nIt gives you a component with operating animations that are played on your signal.\n\nYou can mix different animation operations as chains of effects to it using a visual effect chain controller and preview the changes.\n\nHas built-in shader attachment for pixel level effects like glitches.\n\nHas built-in audio attachment with pre-made audio assets for each transition and effect.","x":-280,"y":-160,"width":540,"height":620},
		{"id":"e6ba5a9a8d0dc73a","type":"text","text":"Development/Publish Plan","x":380,"y":119,"width":281,"height":62},
		{"id":"16a915f204c6f36f","type":"text","text":"### WEEK 1 — Build & Prepare\n**Goal:** Finish a polished MVP and prepare for launch.\n\n### Product\n- [x] Decide final name (`VoidSync`, `EchoFrame`, or `PulseForge`)\n- [ ] Define product scope (≈10 UI FX presets, each with sound)\n- [ ] Structure for Unity and Godot import\n- [ ] Create folder structure:\n  - `/presets/`\n  - `/sounds/`\n  - `/docs/`\n  - `/preview_videos/`\n- [ ] Record short demo clips of each effect (MP4 or GIF, <10s)\n- [ ] Optimize file size and ensure effects work without dependencies\n- [ ] Create README + visual usage guide\n\n### Sound\n- [ ] Design or gather 20–30 short UI SFX (hover, click, morph, etc.)\n- [ ] Assign 2–3 sounds per visual preset\n- [ ] Test sync between visuals and audio in both engines\n\n### Brand\n- [ ] Create simple Voidroot landing page (Notion, Carrd, or HTML)\n- [ ] Add brand visuals (logo + black/white/purple color scheme)\n- [ ] Write tagline: “Animated sci-fi UI effects that move and sound alive.”","x":780,"y":-160,"width":600,"height":620},
		{"id":"337a7ae3dbd74a98","type":"text","text":"List of Features","x":-135,"y":580,"width":250,"height":60},
		{"id":"886668672ff81757","type":"text","text":"## Core Abilities / Features (Updated)\n\n### **1. Basic Motion Presets**\n\n- Fade In / Fade Out\n    \n- Slide (Left, Right, Top, Bottom)\n    \n- Scale Up / Scale Down (Zoom)\n    \n- Pop / Bounce animations\n    \n- Rotate for subtle motion effects  \n    **Benefit:** Add basic animation in 1 line of code or drag-and-drop.\n    \n\n---\n\n### **2. Sound Integration**\n\n- Each animation preset can have a **list of custom sounds** attached (e.g., clicks, pops, swooshes, notification tones).\n    \n- Random or sequential selection from the sound list per trigger.\n    \n- Adjustable **volume, pitch, and delay** per sound.\n    \n- Works for single elements or groups.\n    \n\n**Benefit:** UI feels alive and professional; indie devs don’t need separate sound scripting.\n\n---\n\n### **3. Easing & Timing Control**\n\n- Adjustable easing curves: linear, ease-in, ease-out, ease-in-out\n    \n- Control duration per animation (0.1s → 3s)\n    \n- Optional delays for sequencing multiple elements  \n    **Benefit:** Smooth, professional animations that feel natural.\n    \n\n---\n\n### **4. Chain & Sequence Animations**\n\n- Sequence multiple animations + sound per UI element or group\n    \n- Loop animations optionally (e.g., bouncing button with repeated sound)  \n    **Benefit:** Complex, dynamic interactions with synchronized audio without coding.\n    \n\n---\n\n### **5. Group / Bulk Animations**\n\n- Animate multiple elements at once (menus, panels, buttons)\n    \n- Supports staggered delay for cascading effects with sound  \n    **Benefit:** Rapidly polish entire screens with synchronized audio-visual motion.\n    \n\n---\n\n### **6. Cross-Engine Implementation**\n\n- Godot 4: GDScript script + ready-to-use scene template\n    \n- Unity URP: C# MonoBehaviour + prefab setup  \n    **Benefit:** Developers using either engine can use same product without conversion hassle.\n    \n\n---\n\n### **7. Easy Configuration**\n\n- Animation properties editable via JSON or inspector/prefab settings\n    \n- Each preset can hold a list of sounds per action\n    \n- No coding needed for presets or audio  \n    **Benefit:** Non-programmers can use it, programmers can tweak easily.\n    \n\n---\n\n### **8. Demo & Preview Scene**\n\n- Fully functional demo UI scene showcasing all presets + sound\n    \n- Exportable example for quick integration  \n    **Benefit:** Buyers see exactly what they get and how to implement it.\n    \n\n---\n\n### **9. Future-Proof / Extensible**\n\n- Architecture allows adding **custom animations + sounds** later\n    \n- Compatible with UI scaling, screen resolutions, and layouts  \n    **Benefit:** Customers can grow with your tool; increases long-term value.\n    \n\n---\n\n### Optional Bonus Features\n\n- Button hover effects & click bounce + sound\n    \n- Adaptive animation speed and sound timing based on screen or player settings\n    \n- Dynamic sound layering for grouped animations","x":-404,"y":720,"width":789,"height":720},
		{"id":"470e653ef063d94a","type":"text","text":"### WEEK 2 — Publish & Market\n**Goal:** Release the product, establish credibility, and generate visibility.\n\n### Product Launch\n- [ ] Package tool as `.zip` with organized folders and demo\n- [ ] Upload to **itch.io** (supports crypto) and your **Voidroot webpage**\n- [ ] Write strong description:\n  - [ ] Clear bullet list of features\n  - [ ] Add preview video\n- [ ] Use “Pay What You Want” pricing (min $5–$10)\n\n### Marketing\n- [ ] Create a teaser video (<45 sec) showing all effects\n- [ ] Post on:\n  - [ ] X / Twitter (`#godotengine #unity3d #gameui #vfx #indiedev`)\n  - [ ] Reddit (`r/gamedev`, `r/godot`, `r/unity2D`, `r/IndieDev`)\n  - [ ] Game dev Discord servers (share demos first, not links)\n- [ ] Write a devlog: “How I built VoidSync — a UI FX kit with sound”\n- [ ] DM 3–5 small YouTubers (Unity/Godot channels) and offer free key","x":1460,"y":-160,"width":580,"height":620},
		{"id":"32e08d9f78594b17","type":"text","text":"### WEEK 3 — Expand & Monetize\n**Goal:** Turn reach into consistent crypto income.\n\n### Content & Conversion\n- [ ] Release a **free mini pack** (2 sample effects) linking to full version\n- [ ] Share **before/after** clips of UI with and without your effects\n- [ ] Post **short threads or videos**:\n  - “How to make your UI feel alive (Godot/Unity)”\n- [ ] Collect testimonials or comments from users\n- [ ] Create comparison demos showing your kit in different styles\n\n### Crypto & Payments\n- [ ] Add direct crypto payment options on your webpage (BTC, ETH, USDT)\n- [ ] Display wallet QR codes\n- [ ] Offer a small discount for direct crypto buyers\n- [ ] Announce a **limited promo** (“$5 off first 10 buyers”)\n\n### Next Product Prep\n- [ ] Start planning **second pack**:\n  - Example: “VoidSync HUD Pack” or “PulseForge Sci-Fi Buttons”\n- [ ] Post **WIP clips** to keep your new followers engaged\n- [ ] Note feedback from first buyers to improve workflow","x":2120,"y":-160,"width":600,"height":620},
		{"id":"2fa0fe8675896bd9","type":"text","text":"Good — here’s the **realistic time breakdown** for your 3-week Voidroot plan.  \nYou’re solo, starting from zero presence, so we’ll optimize for **steady, high-impact hours** — not burnout.\n\n---\n\n## 🕒 Overall\n\n- **Duration:** 3 weeks (21 days)\n- **Total daily hours:** **4–6 hrs/day** (intense focus, no fluff)\n- **Work split:**\n    - 60% Product creation (Week 1)\n    - 25% Marketing & launch (Week 2)\n    - 15% Growth & monetization (Week 3)\n\n---\n\n## WEEK 1 — Build & Prepare\n\n**Goal:** Make the full product and base assets.  \n**Hours/day:** 5–6 hrs\n\n|Task|Est. Hours|Notes|\n|---|---|---|\n|Design & build 10 UI FX presets|15–18 hrs|2 per day, incl. polish|\n|Sound design & integration|8–10 hrs|create or edit 20–30 SFX|\n|Engine testing (Unity + Godot)|6 hrs|verify import, tweak timing|\n|Docs, demo clips, structure|4 hrs|README, GIF/MP4|\n|Branding + landing page|3–4 hrs|simple Voidroot theme setup|\n\n**→ Total:** ~35 hrs  \n**Daily pace:** 5–6 hrs for 6 days; rest 1 day for clarity.\n\n---\n\n## WEEK 2 — Publish & Market\n\n**Goal:** Launch and create reach.  \n**Hours/day:** 4–5 hrs\n\n|Task|Est. Hours|Notes|\n|---|---|---|\n|Packaging & uploads|4 hrs|zip + Itch.io + webpage|\n|Teaser video edit|4–5 hrs|45 sec highlight|\n|Post scheduling|2 hrs|write + hashtags|\n|Reddit/Twitter/Discord interaction|6 hrs|1–2 hrs per day|\n|Devlog article|3 hrs|behind-the-scenes blog|\n|Outreach (YouTubers, DMs)|3 hrs|send samples, reply|\n\n**→ Total:** ~25 hrs  \n**Daily pace:** 4–5 hrs per day across 6 days.\n\n---\n\n## WEEK 3 — Expand & Monetize\n\n**Goal:** Drive more sales and build stability.  \n**Hours/day:** 3–4 hrs\n\n|Task|Est. Hours|Notes|\n|---|---|---|\n|Free mini pack|3 hrs|2 FX presets|\n|Marketing content (before/after clips, threads)|6 hrs|1 hr/day|\n|Community engagement|4 hrs|reply to comments, share feedback|\n|Crypto payment integration & promo|3 hrs|QR setup, discount run|\n|Next pack planning + WIP teasers|3 hrs|prep future continuity|\n\n**→ Total:** ~20 hrs  \n**Daily pace:** 3–4 hrs per day across 6 days.\n\n---\n\n## 🧩 Summary Table\n\n|Week|Hours/day|Total hrs|Focus|\n|---|---|---|---|\n|1|5–6|~35|Product creation|\n|2|4–5|~25|Launch & marketing|\n|3|3–4|~20|Expansion & sales|\n\n---\n\n✅ **Minimum required:** ~80 hrs total over 3 weeks.  \nIf you hit that with consistent effort, you’ll have:\n\n- A sellable, high-quality FX pack\n- A working crypto sales page\n- Initial marketing momentum\n- First paying users\n\n---\n\nDo you want me to break this into **daily tasks** (Day 1–21) so you know _exactly what to do each day_ with estimated hours beside them?","x":1351,"y":960,"width":799,"height":1070},
		{"id":"2844d5d17098f404","type":"text","text":"Rough Planning","x":1625,"y":760,"width":250,"height":60},
		{"id":"809dc034e87151e9","type":"text","text":"Toolchain","x":-740,"y":119,"width":250,"height":60},
		{"id":"75a98acddb643862","type":"text","text":"Perfect. Let’s design this as if you’re actually **building your modular animation engine** — an Ableton-style “Motion Rack” for UI animation.\n\nWe’ll treat each _control_ as a **modular node type** you can chain.  \nEach one transforms **time**, **values**, or **events**.  \nI’ll sort them by **priority and practical utility** for building real UI motion systems.\n\n---\n\n## ⚙️ **I. Core Motion Controls (Highest Priority)**\n\n> The fundamental building blocks — you’ll use these in nearly every chain.\n\n|Rank|Control|Purpose|\n|---|---|---|\n|🥇 1|**Ease**|Applies easing curves to interpolate values (In, Out, InOut, Back, Elastic). Core motion shaper.|\n|🥈 2|**Lerp / Tween**|Interpolates from value A → B over time. The heart of all animation chains.|\n|🥉 3|**Delay**|Offsets the start time of downstream motion. Essential for sequencing and staggering.|\n|4|**TimeScale**|Scales the speed of animation globally or locally. Used for slow-mo or UI responsiveness.|\n|5|**Repeat / Loop**|Repeats an animation with optional decay or variation. Needed for pulse, breathing, etc.|\n|6|**Sequence / Chain**|Runs multiple animations one after another. Organizes logic flow.|\n|7|**Blend / Mix**|Blends two motion streams (like crossfade or additive combine).|\n|8|**Trigger / Gate**|Starts, stops, or toggles animation chains on input events.|\n|9|**Randomize**|Adds small random offsets to timing or values. Makes motion organic.|\n|10|**Oscillate / Sine Wave**|Generates cyclic motion (hover, glow pulse, floating UI).|\n\n---\n\n## 🎚️ **II. Property Controls (Directors)**\n\n> These connect motion outputs to actual UI properties.\n\n| Rank | Control                         | Purpose                                                                      |\n| ---- | ------------------------------- | ---------------------------------------------------------------------------- |\n| 1    | **Transform Property**          | Position, rotation, scale — 90% of all visual motion.                        |\n| 2    | **Opacity / Modulate Property** | Fade and blink effects.                                                      |\n| 3    | **Color Property**              | Color transitions, hue shifts, glow feedback.                                |\n| 4    | **Shader Parameter**            | Drive shader uniforms for effects (scanline intensity, distortion, glow).    |\n| 5    | **Audio Reactive Property**     | Syncs motion to sound amplitude or frequency. (Optional advanced node.)      |\n| 6    | **Custom Property Output**      | Generic value pipe to any numeric property (width, radius, font_size, etc.). |\n\n---\n\n## ⏱️ **III. Time & Signal Shapers**\n\n> These shape how time and value signals behave through the chain.\n\n|Rank|Control|Purpose|\n|---|---|---|\n|1|**MapRange**|Maps one value range into another — normalize or scale motion data.|\n|2|**Clamp / Limit**|Restricts motion output within bounds.|\n|3|**Invert**|Flips direction (useful for alternating chains).|\n|4|**Offset (Value)**|Adds bias to base value.|\n|5|**Noise / Jitter**|Adds small random or procedural variations over time.|\n|6|**Saturate / SmoothStep**|Nonlinear smoothing of motion signals.|\n|7|**Envelope**|ADSR-style envelope for time-based response shaping.|\n\n---\n\n## 🧠 **IV. Logical & Reactive Controls**\n\n> These make animation reactive to input, state, or environment.\n\n|Rank|Control|Purpose|\n|---|---|---|\n|1|**OnEvent / TriggerInput**|Start chain from signal (click, hover, focus, custom event).|\n|2|**Conditional (If)**|Route motion depending on state or variable.|\n|3|**Compare**|Detect greater/less/equal conditions (e.g. progress > 0.8).|\n|4|**Switch / Multiplexer**|Select between motion sources.|\n|5|**Timer / Interval**|Periodic triggers (looping or heartbeat motion).|\n|6|**State Sync**|Keeps animation tied to a system variable or UI logic.|\n\n---\n\n## 💫 **V. Visual & Stylization Controls**\n\n> These add motion character or visual spice.\n\n|Rank|Control|Purpose|\n|---|---|---|\n|1|**Spring / Physics**|Natural dynamic motion; overshoot, bounce, settle.|\n|2|**Damping / Friction**|Opposite of spring — smoothing to rest.|\n|3|**Pulse**|Momentary expansion + decay. Great for button click feedback.|\n|4|**Ripple**|Expanding circular effect on a surface.|\n|5|**Waveform**|Continuous oscillation for glow or distortion.|\n|6|**Trail / Echo**|Creates delayed duplicates (afterimage-style effect).|\n\n---\n\n## 🔄 **VI. Utility & Meta Controls**\n\n> Infrastructure nodes that manage or observe the graph.\n\n|Rank|Control|Purpose|\n|---|---|---|\n|1|**Group / Combine**|Bundle multiple motions under one node.|\n|2|**Bypass / Mute**|Temporarily disable a chain for debugging.|\n|3|**Output Monitor**|Visualize the resulting motion curve.|\n|4|**Global Time Input**|Feed a shared clock to sync chains.|\n|5|**Debug / Logger**|Print or visualize values per frame.|\n|6|**Custom Script Node**|For user-defined control when built-ins aren’t enough.|\n\n---\n\n## 🧩 **VII. Optional Advanced Controls**\n\n> Useful for complex procedural or artistic systems.\n\n|Rank|Control|Purpose|\n|---|---|---|\n|1|**Noise Field (2D/3D)**|Procedural offset generator for dynamic UI.|\n|2|**Path Follower**|Animate along curve paths.|\n|3|**Audio Modulator**|Drive values with live sound or beats.|\n|4|**Event Recorder / Playback**|Capture motion and replay it.|\n|5|**Constraint Node**|Limit movement relative to parent or sibling UI elements.|\n|6|**Parameter Modulator**|Drive other node parameters dynamically.|\n\n---\n\n## 🧭 **Recommended Build Order (For Plugin Development)**\n\nIf you’re building this system iteratively:\n\n1. **Ease**, **Lerp**, **Delay**, **PropertyOutput** → foundation.\n    \n2. Add **Oscillate**, **Loop**, **Trigger** → dynamic interactivity.\n    \n3. Add **Spring**, **MapRange**, **Clamp**, **Blend** → nuanced control.\n    \n4. Add **Noise**, **Pulse**, **Randomize**, **Sequence** → realism & polish.\n    \n5. Add **Visual / Editor tools** → timeline preview, debugging monitors.\n    \n\n---\n\nWould you like me to organize these into **actual class groups with data I/O design** (like: input signals, parameters, and outputs for each node) — so you can start defining the base interfaces for your plugin?","x":-1560,"y":-161,"width":660,"height":1081},
		{"id":"661fddc060fe07d0","type":"text","text":"Good — that’s a very clear and ambitious goal. Let’s break it into a **MVP roadmap** that gets you to a functional, modular “Void Animator” system step-by-step.  \nThe trick is to **start from a core abstraction** (animation unit + controller) and **expand outward** toward chaining, triggers, and UI.\n\n---\n\n## ⚙️ MVP ROADMAP — “Void Animator”\n\n### **PHASE 1 – Foundation (Core Animation System)**\n\n**Goal:** Be able to animate a single UI node via script or editor.\n\n**Tasks:**\n\n1. **Create `VoidAnimator` base class.**\n    \n    - Attachable to any Control node.\n        \n    - Has an `animation_time` (total duration).\n        \n    - Has a list of `AnimationEffects`.\n        \n    - Has basic playback controls (`play()`, `stop()`, `pause()`, `reset()`).\n        \n2. **Define `AnimationEffect` abstract class.**\n    \n    - Has `apply(node: Control, t: float)` where `t` ∈ [0, 1].\n        \n    - Supports parameters (`easing`, `delay`, etc.).\n        \n    - Examples: Fade, Scale, Move, Rotate.\n        \n3. **Implement core effects (start small):**\n    \n    - `FadeEffect` (modulate alpha)\n        \n    - `MoveEffect` (rect_position)\n        \n    - `ScaleEffect` (rect_scale)\n        \n    - `RotateEffect` (rotation_degrees)\n        \n    - Each with easing and offset start.\n        \n\n✅ **Result:** You can chain 2–3 effects in code manually and play them together.\n\n---\n\n### **PHASE 2 – Chaining System**\n\n**Goal:** Allow effects to be combined visually and temporally.\n\n**Tasks:**\n\n1. **Implement a chain manager inside `VoidAnimator`.**\n    \n    - Effects have timing offsets.\n        \n    - Add chaining modes:\n        \n        - `SEQUENTIAL` (one after another)\n            \n        - `PARALLEL` (play together)\n            \n    - Add blending control (mix weights if overlapping).\n        \n2. **Add a mini UI editor for effect chains.**\n    \n    - A simple list or timeline inside the Inspector.\n        \n    - Add “+ Add Effect” button → select from effect list.\n        \n\n✅ **Result:** You can stack effects like “Fade → Move → Glow”.\n\n---\n\n### **PHASE 3 – Trigger System**\n\n**Goal:** Make animations reactive and logical.\n\n**Tasks:**\n\n1. **Trigger base system.**\n    \n    - Attach triggers to events: `on_hover`, `on_click`, `on_visible`, etc.\n        \n    - Conditional triggers: `on_condition(lambda: some_bool)`.\n        \n2. **Link triggers to animations.**\n    \n    - `play_on(trigger_name)` or directly connect via UI.\n        \n\n✅ **Result:** You can make things like:  \n`Button → on_hover → glow + bounce`\n\n---\n\n### **PHASE 4 – Audio Sync (Optional for MVP)**\n\n**Goal:** Allow audio clip to sync with animation duration.\n\n**Tasks:**\n\n1. Add optional `AudioEffect` node.\n    \n2. Stretch or trim audio to animation time.\n    \n3. Fade audio in/out to match animation easing.\n    \n\n✅ **Result:** Effects can include synchronized sounds.\n\n---\n\n### **PHASE 5 – Presets & UX Layer**\n\n**Goal:** Make it usable for designers without coding.\n\n**Tasks:**\n\n1. Add **preset system** (saved JSON files or Godot resources).\n    \n    - Categories: “Attention”, “Entrance”, “Exit”, “Emphasis”.\n        \n2. Add **quick preset panel** to pick combos (e.g. “Fade + Move”).\n    \n3. Add **preview** button in Inspector.\n    \n\n✅ **Result:** Designers can create rich animations visually.\n\n---\n\n### **PHASE 6 – Polishing & Advanced Stuff (Post-MVP)**\n\n- Add **complex shaders** (glitch, blur, chroma).\n    \n- Add **custom easing editor**.\n    \n- Add **curve/timeline view**.\n    \n- Add **parameter binding** (animate arbitrary properties).\n    \n- Add **group animations** (sync multiple controls).\n    \n\n---\n\n## 🔢 Implementation Order Summary\n\n|Step|Feature|Scope|Priority|\n|---|---|---|---|\n|1|Core animation runtime (`VoidAnimator`, `AnimationEffect`)|Core|🔥|\n|2|Basic effects (Fade, Move, Scale, Rotate)|Core|🔥|\n|3|Chaining logic (sequential/parallel)|Medium|🔥|\n|4|Triggers system|Reactive|🔥|\n|5|Editor integration|UX|⚡|\n|6|Presets|UX|⚡|\n|7|Audio sync|Optional|🟡|\n|8|Shader & advanced effects|Expansion|🟢|\n\n---\n\nIf you start small, your **first functional milestone** should be:\n\n> A button fades in and moves upward with a single `VoidAnimator` node, using your chain and easing system.\n\nWould you like me to lay out the **class design (API structure)** next — showing what `VoidAnimator`, `AnimationEffect`, and `Trigger` might look like in C# for Godot?","x":825,"y":-1280,"width":800,"height":860},
		{"id":"e085f07d66085509","type":"file","file":"REN/voidroot/Manager Documents/REN-voidanimator MVP Tasks.md","x":-362,"y":-800,"width":705,"height":380}
	],
	"edges":[
		{"id":"f1d1a97ae1827cc9","fromNode":"5aaf23e81bb1d4f4","fromSide":"right","toNode":"e6ba5a9a8d0dc73a","toSide":"left"},
		{"id":"ca797aaf6733da1d","fromNode":"e6ba5a9a8d0dc73a","fromSide":"right","toNode":"16a915f204c6f36f","toSide":"left"},
		{"id":"d9aab4dd57fdca10","fromNode":"16a915f204c6f36f","fromSide":"right","toNode":"470e653ef063d94a","toSide":"left"},
		{"id":"c29ba7f7c0804162","fromNode":"470e653ef063d94a","fromSide":"right","toNode":"32e08d9f78594b17","toSide":"left"},
		{"id":"42f01d6bc024e229","fromNode":"5aaf23e81bb1d4f4","fromSide":"bottom","toNode":"337a7ae3dbd74a98","toSide":"top"},
		{"id":"59028617442081a6","fromNode":"337a7ae3dbd74a98","fromSide":"bottom","toNode":"886668672ff81757","toSide":"top"},
		{"id":"3c563014f28a9922","fromNode":"32e08d9f78594b17","fromSide":"bottom","toNode":"2844d5d17098f404","toSide":"top"},
		{"id":"95d06deb9a9d5d6e","fromNode":"470e653ef063d94a","fromSide":"bottom","toNode":"2844d5d17098f404","toSide":"top"},
		{"id":"07fa92e53335b99e","fromNode":"16a915f204c6f36f","fromSide":"bottom","toNode":"2844d5d17098f404","toSide":"top"},
		{"id":"5db2b8734dbb92be","fromNode":"2844d5d17098f404","fromSide":"bottom","toNode":"2fa0fe8675896bd9","toSide":"top"},
		{"id":"32e6ffcd37f20672","fromNode":"5aaf23e81bb1d4f4","fromSide":"left","toNode":"809dc034e87151e9","toSide":"right"},
		{"id":"4feb6bde00d557db","fromNode":"809dc034e87151e9","fromSide":"left","toNode":"75a98acddb643862","toSide":"right"},
		{"id":"f60ea17716167fed","fromNode":"e6ba5a9a8d0dc73a","fromSide":"right","toNode":"661fddc060fe07d0","toSide":"left"},
		{"id":"c269a41b773aea66","fromNode":"5aaf23e81bb1d4f4","fromSide":"top","toNode":"e085f07d66085509","toSide":"bottom"}
	]
}